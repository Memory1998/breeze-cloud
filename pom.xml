<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.breeze</groupId>
    <artifactId>breeze</artifactId>
    <version>1.0</version>

    <name>${project.artifactId}</name>
    <description>咸蛋 Cloud 小项目</description>
    <packaging>pom</packaging>
    <!--项目开发年份-->
    <inceptionYear>2023</inceptionYear>

    <!--开源协议-->
    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <organization>
        <name></name>
        <url></url>
    </organization>

    <modules>
        <module>breeze-system</module>
        <module>breeze-flow</module>
        <module>breeze-base</module>
        <module>breeze-gateway-server</module>
        <module>breeze-auth-server</module>
        <module>breeze-quartz-server</module>
        <module>breeze-monitor-server</module>
        <module>breeze-sample</module>
    </modules>

    <properties>
        <java.version>1.8</java.version>
        <breeze.version>1.0</breeze.version>
        <spring-boot.version>2.7.10</spring-boot.version>
        <spring-cloud.version>2021.0.6</spring-cloud.version>
        <spring-cloud-alibaba.version>2021.0.5.0</spring-cloud-alibaba.version>

        <!--Swagger Resources-->
        <swagger.version>2.2.9</swagger.version>
        <springdoc.version>1.7.0</springdoc.version>
        <knife4j.version>4.1.0</knife4j.version>
        <knife4j-springdoc-ui.version>3.0.3</knife4j-springdoc-ui.version>

        <oss-s3.version>1.12.445</oss-s3.version>

        <lombok.version>1.18.18</lombok.version>
        <hutool.version>5.8.9</hutool.version>
        <guava.version>31.1-jre</guava.version>
        <spring-boot-monitor.version>2.7.3</spring-boot-monitor.version>
        <captcha.version>1.3.0</captcha.version>
        <easyexcel.version>3.1.1</easyexcel.version>
        <minio.version>8.3.9</minio.version>

        <mybatis-plus.version>3.5.3.1</mybatis-plus.version>
        <mysql.version>8.0.31</mysql.version>
        <druid.version>1.2.8</druid.version>
        <dynamic-datasource.version>3.4.1</dynamic-datasource.version>

        <lombok.version>1.18.26</lombok.version>
        <hutool.version>5.8.15</hutool.version>
        <guava.version>31.1-jre</guava.version>

        <nimbus-jose-jwt.version>9.22</nimbus-jose-jwt.version>
        <spring-authorization-server.version>0.4.1</spring-authorization-server.version>

        <flowable.version>6.7.2</flowable.version>

        <docker.registry>127.0.0.1</docker.registry>
        <docker.host>http://127.0.0.1:2375</docker.host>
        <docker.namespace>library</docker.namespace>
        <docker.username>admin</docker.username>
        <docker.password>P@ssw0rd.123</docker.password>
        <docker.plugin.version>0.33.0</docker.plugin.version>
        <docker-bulid.skip>false</docker-bulid.skip>

        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.version>3.8.1</maven.compiler.version>

        <!-- 其中project.build.sourceEncoding表示项目拷贝时的字符编码，及项目整体代码的字符为utf-8 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- project.reporting.outputEncoding表示maven的一些插件输出文件时的字符编码 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- maven.compiler.encoding表示maven编译时-->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- spring boot 依赖 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
                <exclusions>
                    <exclusion>
                        <artifactId>spring-boot-starter-tomcat</artifactId>
                        <groupId>org.springframework.boot</groupId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- spring cloud 依赖 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- spring cloud alibaba 依赖 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.nimbusds</groupId>
                <artifactId>nimbus-jose-jwt</artifactId>
                <version>${nimbus-jose-jwt.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.security</groupId>
                <artifactId>spring-security-oauth2-authorization-server</artifactId>
                <version>${spring-authorization-server.version}</version>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-extension</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-annotation</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
                <version>${dynamic-datasource.version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

            <!-- OpenAPI 3 -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-gateway-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-openapi3-ui</artifactId>
                <version>${knife4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-ui</artifactId>
                <version>${springdoc.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-security</artifactId>
                <version>${springdoc.version}</version>
            </dependency>

            <dependency>
                <groupId>io.swagger.core.v3</groupId>
                <artifactId>swagger-annotations</artifactId>
                <version>${swagger.version}</version>
            </dependency>
            <!-- OpenAPI 3 -->

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>easyexcel</artifactId>
                <version>${easyexcel.version}</version>
            </dependency>

            <!-- OSS S3 -->
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-s3</artifactId>
                <version>${oss-s3.version}</version>
            </dependency>

            <!-- flowable任务流依赖 -->
            <dependency>
                <groupId>org.flowable</groupId>
                <artifactId>flowable-spring-boot-starter</artifactId>
                <version>${flowable.version}</version>
            </dependency>

            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>${spring-boot-monitor.version}</version>
            </dependency>

            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>${spring-boot-monitor.version}</version>
            </dependency>

            <dependency>
                <groupId>com.anji-plus</groupId>
                <artifactId>spring-boot-starter-captcha</artifactId>
                <version>${captcha.version}</version>
            </dependency>

            <dependency>
                <groupId>io.minio</groupId>
                <artifactId>minio</artifactId>
                <version>${minio.version}</version>
            </dependency>

            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>${mysql.version}</version>
            </dependency>

            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>bootstrap</artifactId>
                <version>5.1.3</version>
            </dependency>

            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>jquery</artifactId>
                <version>3.6.0</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-core</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-validator</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-security</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-doc</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-datasource</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-log</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-xss</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-mail</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-storage</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-websocket</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-oss-s3</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-feign</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-redis-cache</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-base-mybatis</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-system-client</artifactId>
                <version>${breeze.version}</version>
            </dependency>

            <dependency>
                <groupId>com.breeze</groupId>
                <artifactId>breeze-flow-client</artifactId>
                <version>${breeze.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.name}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <!--spring boot 插件-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- maven  docker 打包插件 -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker.plugin.version}</version>
                    <configuration>
                        <dockerHost>${docker.host}</dockerHost>
                        <registry>${docker.registry}</registry>
                        <authConfig>
                            <push>
                                <username>${docker.username}</username>
                                <password>${docker.password}</password>
                            </push>
                        </authConfig>
                        <images>
                            <image>
                                <name>${docker.registry}/${docker.namespace}/${project.name}:${project.version}</name>
                                <build>
                                    <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                </build>
                            </image>
                        </images>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!--
            在创建maven工程的时候，经常会默认使用jdk6的版本来编译源码，
            而我们可能更多会使用jdk8来编译，每次重新导入工程的时候需要在ide重新设置源码和编译版本，
            可以使用插件在maven中指定版本，ide就会根据maven插件配置直接使用对应版本的jdk进行编译
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <target>${maven.compiler.target}</target>
                    <source>${maven.compiler.source}</source>
                    <encoding>UTF-8</encoding>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!--
            Java中主流的单元测试框架JUnit TestNG
            Maven在构建执行到特定生命周期阶段的时候，通过插件来执行JUnit或者TestNG的测试用例
            插件 maven-surefire-plugin 称之为测试运行器（Test Runner）很好的兼容JUnit 3、JUnit 4以及TestNG
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <!-- repositories 名为仓库，解决项目依赖的第三方jar包存放位置，以及多个项目公用第三方jar包。
        pluginRepositories 名为插件仓库，存放maven插件的仓库，告诉项目您使用的插件应该去什么地方下载。
        在不用Maven的时候，比如说以前我们用Ant构建项目，在项目目录下，往往会看到一个名为/lib的子目录，那里存放着各类第三方依赖jar文件，如log4j.jar，junit.jar等等。每建立一个项目，你都需要建立这样的一个/lib目录，然后复制一对jar文件，这是很明显的重复。重复永远是噩梦的起点，多个项目不共用相同的jar文件，不仅会造成磁盘资源的浪费，也使得版本的一致性管理变得困难。此外，如果你使用版本管理工具，如SVN（你没有使用版本管理工具？马上试试SVN吧，它能帮你解决很多头疼的问题），你需要将大量的jar文件提交到代码库里，可是版本管理工具在处理二进制文件方面并不出色。

        Maven仓库就是放置所有JAR文件（WAR，ZIP，POM等等）的地方，所有Maven项目可以从同一个Maven仓库中获取自己所需要的依赖JAR，这节省了磁盘资源。此外，由于Maven仓库中所有的JAR都有其自己的坐标，该坐标告诉Maven它的组ID，构件ID，版本，打包方式等等，因此Maven项目可以方便的进行依赖版本管理。你也不在需要提交JAR文件到SCM仓库中，你可以建立一个组织层次的Maven仓库，供所有成员使用。
        简言之，Maven仓库能帮助我们管理构件（主要是JAR）
    -->
    <pluginRepositories>
        <pluginRepository>
            <id>aliyun-plugin</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>
        <!-- ... possibly other repository elements ... -->
        <repository>
            <id>spring-snapshot</id>
            <name>Spring Snapshot Repository</name>
            <url>https://repo.spring.io/snapshot</url>
        </repository>
    </repositories>

    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
                <nacos.username>breeze</nacos.username>
                <nacos.password>123456</nacos.password>
                <nacos.namespace>dev</nacos.namespace>
            </properties>
            <activation>
                <!-- 默认环境为DEV开发环境 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
                <nacos.username>breeze</nacos.username>
                <nacos.password>123456</nacos.password>
                <nacos.namespace>test</nacos.namespace>
            </properties>
        </profile>
        <profile>
            <id>pro</id>
            <properties>
                <profiles.active>pro</profiles.active>
                <nacos.username>breeze</nacos.username>
                <nacos.password>123456</nacos.password>
                <nacos.namespace>pro</nacos.namespace>
            </properties>
        </profile>
    </profiles>

</project>
