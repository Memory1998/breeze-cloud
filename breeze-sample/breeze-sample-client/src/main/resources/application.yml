spring:
  security:
    oauth2:
      client:
        registration:
          messaging-client-oidc: # registrationId
            provider: sas # 指向 provider 唯一标识【sas】,不填时为 registrationId
            client-id: messaging-client # 在授权服务器申请的客户端标识
            client-secret: secret # 在授权服务器申请的客户端秘钥
            authorization-grant-type: authorization_code # 授权类型
            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}" # 第三方平台 302 重定向URI
            scope: openid,profile # 客户端认证方法，多个使用【,】分割
            client-name: messaging-client-oidc # 客户端名称
          messaging-client-authorization-code:
            provider: sas
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/authorized"
            scope: message.read,message.write
            client-name: messaging-client-authorization-code
          messaging-client-client-credentials:
            provider: sas
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: client_credentials
            scope: message.read,message.write
            client-name: messaging-client-client-credentials
        provider: # 授权服务器提供的元信息
          sas: # 对应了 registration 中的 provider,授权服务器的唯一标识
            # ======================= 可以简化下面的配置 ======================
            # authorization-uri: http://localhost:8000/oauth2/authorize # 请求授权码地址
            # token-uri: http://localhost:8000/oauth2/token # 客户端获取token的端点
            # user-info-uri: http://localhost:8000/userinfo # 客户端获取用户信息的端点
            # user-info-authentication-method: GET
            # user-name-attribute: sub # 客户端使用 user-info-uri 获取用户信息后，解析用户名的key
            # jwk-set-uri: http://localhost:8000/oauth2/jwks # 客户端获取授权服务器提供的公钥信息，jwkSet的请求端点
            # ======================= 可以简化上面的配置 ======================
            issuer-uri: http://localhost:8000 # 授权服务器提供的元信息端点服务，配置项都可以从该端点读取，或者直接配置这一项

messages:
  base-uri: http://127.0.0.1:8090
